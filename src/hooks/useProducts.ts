/* eslint-disable @typescript-eslint/no-explicit-any */
import {useQuery, useQueryClient} from '@tanstack/react-query'
import ProductService from '@/services/products/product.service'
import {useCurrentLanguage} from './useCurrentLanguage'
import {useState, useEffect, useRef} from 'react'
import {Product} from '@/services/products/product.types'
// import {useTypedSelector} from './useTypedSelector'
// import {useTypedSelector} from './useTypedSelector'

// –¢–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export interface ProductQueryParams {
  categories?: string[]
  minPrice?: number
  maxPrice?: number
  delivery?: string[]
  page?: number
  limit?: number
  size?: number
  sort?: string
  direction?: 'asc' | 'desc'
  approveStatuses?: 'ALL' | 'APPROVED' | 'PENDING' | ''
  search?: string
  [key: string]: any
}

// üîë –û–±—â–∏–π –∫–ª—é—á –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const PRODUCTS_QUERY_KEY = 'products'

export const useProducts = (
  params: ProductQueryParams = {},
  resetPageParams: () => void,
  specialRoute?: string | undefined,
  accessToken?: string
) => {
  const currentLang = useCurrentLanguage()
  console.log('currentLang in useProducts', currentLang)
  // const {currentLangValue} = useTypedSelector((state) => state.currentLangSlice)
  const [resData, setResData] = useState<Product[]>([])
  const prevParamsRef = useRef<string>('')
  const queryClient = useQueryClient()
  const prevLangRef = useRef<string | null>(currentLang)
  // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞—è page)
  const paramsWithoutPage = {...params}
  delete paramsWithoutPage.page
  const currentParamsKey = JSON.stringify([paramsWithoutPage, specialRoute])

  // –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (prevParamsRef.current !== currentParamsKey) {
      console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
      setResData([])
      prevParamsRef.current = currentParamsKey
    }
  }, [currentParamsKey])

  const queryKey = [PRODUCTS_QUERY_KEY, currentLang, currentParamsKey, specialRoute, params.page]
  useEffect(() => {
    // Clear resData if params or language changed to prevent stale merge
    if (prevParamsRef.current !== currentParamsKey || prevLangRef.current !== currentLang) {
      resetPageParams()
      setResData([])
      prevParamsRef.current = currentParamsKey
      prevLangRef.current = currentLang
      queryClient.invalidateQueries({queryKey: [PRODUCTS_QUERY_KEY]}) // Invalidate cache on language or params change
    }
  }, [currentParamsKey, currentLang, queryClient])
  const queryResult = useQuery({
    queryKey,
    queryFn: async () => {
      console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params)
      const res = await ProductService.getAll(
        {...params, approveStatuses: params.approveStatuses === 'ALL' ? '' : params.approveStatuses},
        specialRoute,
        currentLang,
        accessToken
      )

      return res
    },
    placeholderData: (previousData) => previousData ?? undefined,
    staleTime: 30000, // 30 —Å–µ–∫—É–Ω–¥
    refetchOnWindowFocus: false,
    refetchOnMount: true
  })

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è resData
  useEffect(() => {
    if (queryResult.data) {
      console.log('–ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', queryResult.data.content.length, '—Ç–æ–≤–∞—Ä–æ–≤')

      setResData((prev) => {
        if (!params.page || params.page === 0) {
          console.log('–ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)')
          return queryResult.data.content
        }

        console.log('–î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º')
        const newUniqueProducts = queryResult.data.content.filter(
          (newProduct) => !prev.some((prevProduct) => prevProduct.id === newProduct.id)
        )

        return [...prev, ...newUniqueProducts]
      })
    }
  }, [queryResult.data, params.page])

  const forceRefetch = async () => {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
    setResData([])
    await queryClient.invalidateQueries({queryKey: [PRODUCTS_QUERY_KEY]})
    queryResult.refetch()
  }

  return {
    ...queryResult,
    resData,
    forceRefetch
  }
}

export const invalidateProductsCache = async (queryClient: ReturnType<typeof useQueryClient>) => {
  await queryClient.invalidateQueries({queryKey: [PRODUCTS_QUERY_KEY]})
}
