import {useEffect, useState, useRef} from 'react'
import {useQuery} from '@tanstack/react-query'
import {Product} from '@/services/products/product.types'
import ProductService from '@/services/products/product.service'

interface PageParams {
  page: number
  size: number
  minPrice?: number
  maxPrice?: number
  categoryIds?: string
  title?: string
  approveStatuses?: 'APPROVED' | 'PENDING' | 'ALL' | ''
  direction?: 'asc' | 'desc'
  deliveryMethodIds?: string
  sort?: string
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [key: string]: any
}

interface PageResponse {
  content: Product[]
  totalPages: number
  totalElements: number
  size: number
  number: number
  last: boolean
  first: boolean
  numberOfElements: number
  empty: boolean
}

interface UseProductsWithPaginationReturn {
  data: PageResponse | undefined
  products: Product[]
  isLoading: boolean
  isError: boolean
  isFetching: boolean
  error: Error | null
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –∏—Ö
 *
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (page, size, —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç.–¥.)
 * @param onReset - –ö–æ–ª–±—ç–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏)
 * @param specialRoute - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param accessToken - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param enabled - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–∞–º–∏
 *
 * @example
 * const { products, data, isLoading } = useProductsWithPagination(
 *   { page: 0, size: 9, title: 'search' },
 *   () => {},
 *   '/api/products/special',
 *   'token123',
 *   true // enabled
 * )
 */
const useProductsWithPagination = (
  params: PageParams,
  onReset?: () => void,
  specialRoute?: string,
  accessToken?: string
): UseProductsWithPaginationReturn => {
  const [currentPageProducts, setCurrentPageProducts] = useState<Product[]>([])
  const previousPageRef = useRef<number>(-1)

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è React Query
  // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const queryKey = [
    'products-pagination',
    params.page,
    params.size,
    params.minPrice,
    params.maxPrice,
    params.categoryIds,
    params.title,
    params.approveStatuses,
    params.direction,
    params.deliveryMethodIds,
    params.sort,
    specialRoute,
    accessToken
  ]

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const fetchProducts = async (): Promise<PageResponse> => {
    console.log('üîÑ useProductsWithPagination: Fetching products', {
      page: params.page,
      size: params.size,
      filters: {
        title: params.title,
        categoryIds: params.categoryIds,
        priceRange: `${params.minPrice}-${params.maxPrice}`,
        delivery: params.deliveryMethodIds
      }
    })

    try {
      let response: PageResponse

      if (specialRoute) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç
        response = await ProductService.getAll(params, specialRoute, accessToken)
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        response = await ProductService.getAll(params)
      }

      console.log('‚úÖ useProductsWithPagination: Products fetched successfully', {
        page: response.number,
        contentLength: response.content.length,
        totalPages: response.totalPages,
        totalElements: response.totalElements,
        isLast: response.last
      })

      return response
    } catch (error) {
      console.error('‚ùå useProductsWithPagination: Error fetching products', error)
      throw error
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const {data, isLoading, isError, isFetching, error} = useQuery<PageResponse, Error>({
    queryKey,
    queryFn: fetchProducts,
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç - –¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç - –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à–µ
    retry: 2, // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å 2 —Ä–∞–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    refetchOnWindowFocus: false, // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    enabled: true // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (data?.content) {
      console.log('üì¶ useProductsWithPagination: Updating current page products', {
        productsCount: data.content.length,
        page: data.number
      })
      setCurrentPageProducts(data.content)
      previousPageRef.current = params.page
    }
  }, [data, params.page])

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
  useEffect(() => {
    if (previousPageRef.current !== -1 && previousPageRef.current !== params.page) {
      console.log('üîÑ useProductsWithPagination: Page changed, clearing products temporarily', {
        from: previousPageRef.current,
        to: params.page
      })
      // –ù–µ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–µ—Ä—Ü–∞–Ω–∏—è
      // React Query –ø–æ–∫–∞–∂–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ
    }
  }, [params.page])

  return {
    data,
    products: currentPageProducts, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    isLoading,
    isError,
    isFetching,
    error: error as Error | null
  }
}
// import {useEffect, useState, useRef} from 'react'
// import {useQuery} from '@tanstack/react-query'
// import {Product} from '@/services/products/product.types'
// import ProductService from '@/services/products/product.service'

export default useProductsWithPagination
