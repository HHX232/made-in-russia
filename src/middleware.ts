/* eslint-disable @typescript-eslint/no-unused-vars */
import {NextResponse} from 'next/server'
import type {NextRequest} from 'next/server'
import instance, {axiosClassic} from './api/api.interceptor'
import {saveTokenStorage} from './services/auth/auth.helper'
import Cookies from 'js-cookie'
import {headers} from 'next/headers'

// services/auth/auth.helper.ts
export const removeFromStorage = () => {
  Cookies.remove('accessToken')
  Cookies.remove('refreshToken')
}
const protectedRoutes = ['/basket', '/profile']
const publicRoutes = ['/login', '/register']
interface User {
  id: number
  role: string
  email: string
  login: string
  phoneNumber: string
  region: string
  registrationDate: string
  lastModificationDate: string
  avatar: string
}
export async function middleware(request: NextRequest) {
  try {
    const {pathname} = request.nextUrl
    console.log('üìç –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:', pathname)

    const accessToken = request.cookies.get('accessToken')?.value
    const refreshToken = request.cookies.get('refreshToken')?.value

    if (protectedRoutes.some((route) => pathname.startsWith(route))) {
      console.log('üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:', pathname)

      if (!refreshToken) {
        console.log('‚ùå –ù–µ—Ç refresh token, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /login')
        console.log('refreshToken —Ç–∏–ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π ', refreshToken, ' –∫–æ–Ω–µ—Ü refresh —Ç–æ–∫–µ–Ω–∞')
        return NextResponse.redirect(new URL('/login', request.url))
      }
      if (!accessToken) {
        console.log('–ù–µ—Ç –≥—Ä–µ–±–∞–Ω–Ω–æ–≥–æ accessToken')
      }

      try {
        await instance.get<User>('/me', {
          headers: {
            Authorization: `Bearer ${accessToken || 'stasic smotri'}`,
            'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
          }
        })
        return NextResponse.next()
      } catch (error) {
        console.error('–ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞', error)

        try {
          const {data: tokenData} = await axiosClassic.patch<{
            accessToken: string
          }>(
            '/me/current-session/refresh',
            {refreshToken},
            {
              headers: {
                'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
              }
            }
          )

          console.log('NEW tokenData', tokenData)
          saveTokenStorage({
            accessToken: tokenData.accessToken,
            refreshToken: refreshToken
          })
          console.log('–º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã')

          await instance.get<User>('/me', {
            headers: {
              Authorization: `Bearer ${accessToken || 'stasic smotri'}`,
              'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
            }
          })
          return NextResponse.next()
        } catch (e) {
          console.error('—É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ Failed to refresh token:', e)
          removeFromStorage()
          return NextResponse.redirect(new URL('/', request.url))
        }
      }
      return NextResponse.next()
    }

    if (publicRoutes.some((route) => pathname.startsWith(route))) {
      console.log('üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:', pathname)

      if (!accessToken && !refreshToken) {
        return NextResponse.next()
      }
      if (!!refreshToken) {
        try {
          console.log('–ù–∞—á–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me N1')
          const response = await instance.get<User>('/me', {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
            }
          })
          console.log('–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me N1 —É—Å–ø–µ—à–Ω–æ')
          return NextResponse.redirect(new URL('/', request.url))
        } catch (_) {
          console.error('–ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ N1')
          try {
            console.log('–ù–∞—á–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me/current-session/refresh N1')
            const {data: tokenData} = await axiosClassic.patch<{
              accessToken: string
            }>(
              '/me/current-session/refresh',
              {refreshToken},
              {
                headers: {
                  'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
                }
              }
            )
            console.log('–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me/current-session/refresh N1 —É—Å–ø–µ—à–Ω–æ', tokenData)
            saveTokenStorage({
              accessToken: tokenData.accessToken,
              refreshToken: refreshToken
            })
            console.log('–º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã')
            console.log('–ù–∞—á–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ N2')
            await instance.get<User>('/me', {
              headers: {
                Authorization: `Bearer ${accessToken || 'stasic smotri'}`,
                'X-Internal-Request': process.env.INTERNAL_REQUEST_SECRET!
              }
            })
            console.log('–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ /me —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ N2')

            return NextResponse.redirect(new URL('/', request.url))
          } catch (e) {
            console.error('—É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ Failed to refresh token:')
            // removeFromStorage()
            return NextResponse.next()
          }
        }
      }

      console.log('‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É')
      return NextResponse.next()
    }

    return NextResponse.next()
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ middleware:', error)
    return NextResponse.next()
  }
}
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico|.*\\.(?:svg|jpg|jpeg|png|gif|webp|ico|json|xml|txt)).*)']
}
