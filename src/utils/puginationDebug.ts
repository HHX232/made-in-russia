/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// utils/paginationDebug.ts

interface PaginationDebugInfo {
  currentPage: number
  totalPages: number
  loadedPages: number[]
  totalComments: number
  uniqueCommentIds: number[]
  duplicateCount: number
}

export const createPaginationDebugger = () => {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const debugInfo: PaginationDebugInfo = {
    currentPage: 0,
    totalPages: 0,
    loadedPages: [],
    totalComments: 0,
    uniqueCommentIds: [],
    duplicateCount: 0
  }

  const logPageLoad = (page: number, response: any) => {
    console.group(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}`)
    // console.log('–û—Ç–≤–µ—Ç API:', response)
    // console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', response.content?.length || 0)
    // console.log('–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', response.page?.number || response.number || page)
    // console.log('–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', response.page?.totalPages || response.totalPages || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    // console.log('–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', response.page?.totalElements || response.totalElements || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    // console.log('–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞?', response.last || false)
    console.groupEnd()
  }

  const checkDuplicates = (comments: any[]) => {
    const ids = comments.map((c) => c.id)
    const uniqueIds = new Set(ids)
    const duplicates = ids.length - uniqueIds.size

    if (duplicates > 0) {
      console.warn(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤!`)

      // –ù–∞—Ö–æ–¥–∏–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ ID –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
      const idCounts = ids.reduce(
        (acc, id) => {
          acc[id] = (acc[id] || 0) + 1
          return acc
        },
        {} as Record<number, number>
      )

      const duplicatedIds = Object.entries(idCounts)
        .filter(([_, count]) => Number(count) > 1)
        .map(([id, count]) => ({id: Number(id), count}))

      console.table(duplicatedIds)
    }

    return {
      uniqueCount: uniqueIds.size,
      duplicateCount: duplicates,
      uniqueIds: Array.from(uniqueIds)
    }
  }

  const logState = (state: {
    comments: any[]
    currentPage: number
    totalPages: number
    hasMore: boolean
    loadedPages: Set<number>
  }) => {
    const duplicateInfo = checkDuplicates(state.comments)

    console.group('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
    // console.log('–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', state.currentPage)
    // console.log('–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', state.totalPages)
    // console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', Array.from(state.loadedPages).sort())
    // console.log('–ï—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã?', state.hasMore)
    // console.log('–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', state.comments.length)
    // console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', duplicateInfo.uniqueCount)
    // console.log('–î—É–±–ª–∏–∫–∞—Ç–æ–≤:', duplicateInfo.duplicateCount)
    console.groupEnd()
  }

  const logError = (error: any, context: string) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, error)
  }

  return {
    logPageLoad,
    checkDuplicates,
    logState,
    logError
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:
// const debugger = createPaginationDebugger()
// debugger.logPageLoad(page, response)
// debugger.logState({ comments, currentPage, totalPages, hasMore, loadedPages })
